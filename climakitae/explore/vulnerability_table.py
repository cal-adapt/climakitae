import numpy as np
import pandas as pd
import contextlib
import io
from climakitae.explore.vulnerability import cava_data

suppress_output = True

# Params dict
table_vars = {
    "Likely summer day high": {
        "variable": "Air Temperature at 2m",
        "metric_calc": "max",
        "season": "summer",
        "percentile": True,
        "heat_idx_threshold": None,
        "one_in_x": None,
    },
    "Likely summer night low": {
        "variable": "Air Temperature at 2m",
        "metric_calc": "min",
        "season": "summer",
        "percentile": True,
        "heat_idx_threshold": None,
        "one_in_x": None,
    },
    "Likely winter day high": {
        "variable": "Air Temperature at 2m",
        "metric_calc": "max",
        "season": "winter",
        "percentile": True,
        "heat_idx_threshold": None,
        "one_in_x": None,
    },
    "Likely winter night low": {
        "variable": "Air Temperature at 2m",
        "metric_calc": "min",
        "season": "winter",
        "percentile": True,
        "heat_idx_threshold": None,
        "one_in_x": None,
    },
    # "1-in-2 year maximum": {
    #     "variable": "Air Temperature at 2m",
    #     "metric_calc": "max",
    #     "season": "all",
    #     "percentile": False,
    #     "heat_idx_threshold": False,
    #     "one_in_x": True,
    # },
    "1-in-X year maximum": {
        "variable": "Air Temperature at 2m",
        "metric_calc": "max",
        "season": "all",
        "percentile": None,
        "heat_idx_threshold": None,
        "one_in_x": True,
    },
    "1-in-X year minimum": {
        "variable": "Air Temperature at 2m",
        "metric_calc": "min",
        "season": "all",
        "percentile": None,
        "heat_idx_threshold": None,
        "one_in_x": True,
    },
    "High/Extreme Heat Index": {
        "variable": "NOAA Heat Index",
        "metric_calc": "max",
        "season": "all",
        "percentile": None,
        "heat_idx_threshold": True,
        "one_in_x": None,
    },
}


def create_vul_table(example_loc, percentile, heat_idx_threshold, one_in_x):
    """
    Creates a vulnerability assessment table and exports the table to CSV.
    """
    # Create empty df and instantiate variables
    df = pd.DataFrame(columns=table_vars.keys())
    lat, lon = example_loc.lat.item(), example_loc.lon.item()
    months_map = {"winter": [12, 1, 2], "summer": [6, 7, 8], "all": np.arange(1, 13)}
    time_periods = [
        (1981, 2010),
        (2021, 2050),
        (2031, 2060),
        (2061, 2090),
    ]

    # Create each column in the table, which is the historical period (1980-2010) and each WL (1.5, 2.0, 3.0, 4.0).
    for time_period in time_periods:

        metrics = []

        # Calculate each variable in the table
        for key in table_vars:
            params = table_vars[key]

            # Suppress outputs of `cava_data` function
            if suppress_output:

                with contextlib.redirect_stdout(io.StringIO()):

                    data = cava_data(
                        example_loc,
                        variable=params["variable"],
                        approach="time",
                        downscaling_method="Dynamical",
                        time_start_year=time_period[0],
                        time_end_year=time_period[1],
                        historical_data="Historical Climate",  # or "historical reconstruction"
                        ssp_data=["SSP3-7.0"],
                        metric_calc=params["metric_calc"],
                        heat_idx_threshold=params["heat_idx_threshold"]
                        and heat_idx_threshold,  # Heat index
                        one_in_x=params["one_in_x"]
                        and one_in_x,  # Thresholds tools freq. counts
                        percentile=params["percentile"] and percentile,
                        season=params["season"],
                        units="degF",
                        wrf_bias_adjust=True,
                        export_method="None",  # off-ramp, full calculate, both
                        separate_files=True,  # Toggle to determine whether or not the user wants to separate climate variable information into separate files
                        file_format="NetCDF",
                    )

            # Retrieve data and average across simulation dimension
            val = data["calc_data"][0].mean(dim="simulation").item()

            # Add val to metrics to be added into row
            metrics.append(val)

        # Create dictionary of values to be input into DataFrame
        df.loc[str(time_period)] = pd.Series(dict(zip(table_vars.keys(), metrics)))

    # Make slight modifications to DataFrame
    # df = df.T.rename(columns={"0.0": "Hist. Period (1980-2010)"})
    df = df.T

    # Write out dataframe
    df.to_csv(f"final_table_{example_loc.index.item()}.csv", index=True)

    return df
