import pytest
import xarray as xr
import pandas as pd
import numpy as np
from climakitae.util.utils import get_closest_gridcell, add_dummy_time_to_wl
from climakitae.core.data_export import export
from climakitae.explore.threshold_tools import get_block_maxima, get_return_value
from your_module_name import _export_no_e, _clean_wl_data, _filter_ba_models, _get_closest_gridcell_and_separate_files, _metric_agg, CavaParams, cava_data

# Mock data setup
@pytest.fixture
def mock_dataset():
    """Fixture for creating a mock xarray dataset."""
    times = pd.date_range("2000-01-01", periods=365, freq="D")
    data = np.random.rand(len(times), 3, 3)  # 3x3 grid
    return xr.DataArray(data, coords=[times, [1, 2, 3], [4, 5, 6]], dims=["time", "lat", "lon"])

@pytest.fixture
def mock_input_locations():
    """Fixture for creating a mock input locations DataFrame."""
    return pd.DataFrame({
        'lat': [1.0, 2.0, 3.0],
        'lon': [4.0, 5.0, 6.0]
    })

# Tests for _export_no_e function
def test_export_no_e(monkeypatch):
    """Test _export_no_e function with a mock export."""
    def mock_export(*args, **kwargs):
        raise Exception("Mock exception for file exists")

    monkeypatch.setattr(export, "export", mock_export)

    # This test should ensure no exception is raised
    try:
        _export_no_e(None, "filename", "format")
    except Exception as e:
        pytest.fail(f"Export raised an exception: {e}")

# Tests for _clean_wl_data function
def test_clean_wl_data(mock_dataset):
    """Test _clean_wl_data function."""
    downscaling_method = "Dynamical"
    cleaned_data = _clean_wl_data(mock_dataset, downscaling_method)
    assert "x" in cleaned_data.dims, "X dimension not added correctly"
    assert "y" in cleaned_data.dims, "Y dimension not added correctly"

# Tests for _filter_ba_models function
def test_filter_ba_models(mock_dataset):
    """Test _filter_ba_models function."""
    mock_dataset = mock_dataset.assign_coords(simulation=("time", ["WRF_EC-Earth3_r1i1p1f1"] * len(mock_dataset.time)))
    downscaling_method = "Dynamical"
    wrf_bias_adjust = True
    historical_data = "Non-Historical"
    filtered_data = _filter_ba_models(mock_dataset, downscaling_method, wrf_bias_adjust, historical_data)
    assert "simulation" in filtered_data.coords, "Simulations not filtered correctly"

# Tests for _get_closest_gridcell_and_separate_files function
def test_get_closest_gridcell_and_separate_files(mock_dataset):
    """Test _get_closest_gridcell_and_separate_files function."""
    lat, lon = 1.5, 4.5
    downscaling_method = "Dynamical"
    separate_files = False
    closest_cell = _get_closest_gridcell_and_separate_files(mock_dataset, lat, lon, downscaling_method, separate_files)
    assert closest_cell is not None, "Closest grid cell not found correctly"

# Tests for _metric_agg function
def test_metric_agg(mock_dataset):
    """Test _metric_agg function."""
    approach = "warming_level"
    metric = "max"
    heat_idx_threshold = 0.5
    one_in_x = 10
    percentile = 90
    name_of_calc = "Test Calc"
    distr = "gev"
    result = _metric_agg(mock_dataset, approach, metric, heat_idx_threshold, one_in_x, percentile, name_of_calc, distr)
    assert result.name == name_of_calc, "Metric aggregation did not return expected result"

# Tests for CavaParams class
def test_cava_params_validation(mock_input_locations):
    """Test CavaParams class for parameter validation."""
    with pytest.raises(ValueError) as excinfo:
        params = CavaParams(input_locations=mock_input_locations, time_start_year=2020, time_end_year=2010)
    assert "Start year must come before" in str(excinfo.value), "Parameter validation did not catch error"

# Tests for cava_data function
def test_cava_data_function(mock_input_locations):
    """Test cava_data function."""
    try:
        cava_data(
            input_locations=mock_input_locations,
            variable="Air Temperature at 2m"
        )
    except Exception as e:
        pytest.fail(f"cava_data raised an exception: {e}")



# Example of a mock dataset
@pytest.fixture
def mock_data():
    # Create a simple xarray dataset with dimensions and variables
    data = xr.Dataset(
        {
            "temperature": (("lat", "lon", "time"), np.random.rand(2, 2, 365)),
        },
        coords={
            "lat": [34.05, 36.16],
            "lon": [-118.24, -115.15],
            "time": pd.date_range("2000-01-01", periods=365),
        },
    )
    return data

# Mock data retrieval function
@patch('climakitae.core.data_load.load')
def test_cava_data_with_mock_data(mock_load, mock_data):
    # Configure the mock to return the mock dataset
    mock_load.return_value = mock_data
    
    # Input parameters
    input_locations = pd.DataFrame({
        'lat': [34.05],
        'lon': [-118.24]
    })

    # Call the function with mocked data
    result = cava_data(
        input_locations=input_locations,
        variable="Air Temperature at 2m",
        approach="time",
        downscaling_method="Dynamical",
        time_start_year=2000,
        time_end_year=2000,
        historical_data="Historical Climate",
        ssp_data=["SSP3-7.0"],
        warming_level="1.5",
        metric_calc="max",
        heat_idx_threshold=None,
        one_in_x=None,
        percentile=90,
        season="all",
        wrf_bias_adjust=True,
        export_method="both",
        separate_files=True,
        file_format="NetCDF",
        batch_mode=False,
        distr="gev",
    )

    # Assertions to validate the result
    assert result is not None
    assert isinstance(result, xr.Dataset)
    # Add more assertions based on expected output

def test_cava_params_validation():
    # Test valid parameters
    params = CavaParams(
        input_locations=pd.DataFrame({
            'lat': [34.05],
            'lon': [-118.24]
        }),
        time_start_year=2000,
        time_end_year=2010,
        variable="Air Temperature at 2m",
        metric_calc="max",
        percentile=90,
        approach="time",
    )

    assert params is not None

    # Test invalid parameters
    with pytest.raises(ValueError):
        CavaParams(
            input_locations=pd.DataFrame({
                'lat': [34.05],
                'lon': [-118.24]
            }),
            time_start_year=2010,
            time_end_year=2000,  # Invalid because start > end
            variable="Air Temperature at 2m",
            metric_calc="max",
            percentile=90,
            approach="time",
        )

# Add more tests for other edge cases and functionalities