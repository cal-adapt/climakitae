import pytest
import xarray as xr
import pandas as pd
import numpy as np
import os
from climakitae.util.utils import (
    read_csv_file,
    get_closest_gridcell,
    add_dummy_time_to_wl,
)
from climakitae.core.paths import stations_csv_path
from climakitae.core.data_export import export
from climakitae.explore.threshold_tools import get_block_maxima, get_return_value
from climakitae.explore.vulnerability import (
    _export_no_e,
    _clean_wl_data,
    _filter_ba_models,
    _metric_agg,
    CavaParams,
    cava_data,
)

##### DONE #####


# Test `export_no_e` on a series of potential exports.
def test_export_no_e(test_data_2022_monthly_45km):
    """
    Test `_export_no_e` function to ensure it correctly handles exporting data to a file.

    The test verifies that:
    1. The function creates a file when it doesn't exist.
    2. The function does not modify an existing file when called again.
    3. The file is deleted correctly after the test.

    Parameters:
    test_data_2022_monthly_45km (xarray.Dataset): Test dataset used for export.
    """
    # Export dataset
    export_path = os.path.join(
        os.path.dirname(os.path.abspath(__file__)), "random_file.nc"
    )
    _export_no_e(test_data_2022_monthly_45km, export_path, "NetCDF")

    # Assert path exists
    assert os.path.exists(export_path), "The file should be created."

    # Try exporting it again
    _export_no_e(test_data_2022_monthly_45km, export_path, "NetCDF")

    # Check that the file still exists and has not been modified
    assert os.path.exists(export_path), "The file should still exist."

    # Delete exported file
    os.remove(export_path)
    assert not os.path.exists(export_path), "The file should have been deleted."


def test_clean_wl_data(test_dataset_WL_Alamedacounty_45km_hourly):
    """
    Test `_clean_wl_data` function to ensure it correctly cleans and renames the simulation dimension.

    The test asserts that:
    1. The `all_sims` dimension is renamed to `simulation`.
    2. Descriptions for SSPs are removed when `separate_files` is True.
    3. The original number of simulations is preserved.

    Parameters:
    test_dataset_WL_Alamedacounty_45km_hourly (xarray.Dataset): Test dataset used for cleaning.
    """
    orig_ds = test_dataset_WL_Alamedacounty_45km_hourly
    num_sims = len(orig_ds["all_sims"])

    # Assert that the simulation names are in their original form
    assert "all_sims" in orig_ds.dims, "Simulation dimension should be `all_sims`."
    assert (
        "WRF_CESM2_r11i1p1f1_Historical + SSP 3-7.0 -- Business as Usual"
        in orig_ds.all_sims
    ), "The format of all simulation names should include additional SSP text."

    # Assert that the simulation dimension gets changed correctly and test across both potential inputs for `separate_files`.
    # Re-assigining orig_ds to the original dataset because it gets mutated during each iteration of `_clean_wl_data`
    orig_ds = test_dataset_WL_Alamedacounty_45km_hourly.copy()
    ds = _clean_wl_data(orig_ds, "Dynamical", True)
    assert (
        "all_sims" not in ds.dims and "simulation" in ds.dims
    ), "Simulation dimension should be renamed."
    assert (
        len(ds["simulation"]) == num_sims
    ), "Number of simulations should not be changed."

    # Make sure descriptions for SSPs are removed
    def substring_exists(substring, lst):
        return any(substring in string for string in lst)

    assert not substring_exists("Business as Usual", ds["simulation"])
    assert (
        "WRF_CESM2_r11i1p1f1_Historical + SSP 3-7.0" in ds.simulation
    ), "The format of the simulation name should no longer include additional SSP text."


def test_filter_ba_models(test_dataset_WL_Alamedacounty_45km_hourly):
    """
    Test `_filter_ba_models` function to ensure it correctly filters simulations based on input parameters.

    The test asserts that:
    1. Simulations are not filtered out under non-filtering conditions.
    2. The correct simulation is filtered out under filtering conditions.

    Parameters:
    test_dataset_WL_Alamedacounty_45km_hourly (xarray.Dataset): Test dataset used for filtering.
    """
    # Rename `all_sims` to `simulation`
    orig_ds = test_dataset_WL_Alamedacounty_45km_hourly.copy()
    orig_ds = orig_ds.rename({"all_sims": "simulation"})

    # Assert that simulations are not filtered on other param inputs
    orig_ds_len = len(orig_ds.simulation)
    ds = _filter_ba_models(orig_ds, "Statistical", True, "Historical Climate")
    assert len(ds.simulation) == orig_ds_len, "No simulations should be changed."
    ds = _filter_ba_models(orig_ds, "Dynamical", False, "Historical Climate")
    assert len(ds.simulation) == orig_ds_len, "No simulations should be changed."
    ds = _filter_ba_models(orig_ds, "Dynamical", True, "Historical Reconstruction")
    assert len(ds.simulation) == orig_ds_len, "No simulations should be changed."

    # Assert that simulations are actually filtered out
    ds = _filter_ba_models(orig_ds, "Dynamical", True, "Historical Climate")
    wrf_bc_sims_45km = [
        ("WRF_EC-Earth3_r1i1p1f1_Historical + SSP 3-7.0 -- Business as Usual"),
        ("WRF_EC-Earth3-Veg_r1i1p1f1_Historical + SSP 3-7.0 -- Business as Usual"),
    ]
    assert (
        wrf_bc_sims_45km in ds.simulation.values and len(ds.simulation.values) == 2
    ), "BC-WRF EC-Earth3 anbd EC-Earth3-Veg simulations should be the only ones in the post-filtered data AND the only simulations left for 45km WRF data."


def test_metric_agg(test_dataset_time_single_cell_3km_hourly_2025_2030):
    """
    Test `_metric_agg` function to ensure it correctly aggregates metrics over time or space.

    The test verifies that:
    1. The output type is an xarray DataArray.
    2. The output shape and dimensions are as expected.
    3. Values are within expected ranges.
    4. The new name of the DataArray is correctly assigned.

    Parameters:
    test_dataset_time_single_cell_3km_hourly_2025_2030 (xarray.Dataset): Test dataset used for metric aggregation.
    """
    # Grab dataset and number of simulations
    ds = test_dataset_time_single_cell_3km_hourly_2025_2030.copy()
    num_sims = len(ds.simulation)
    new_name = "test_name"

    # Heat Index test
    calc_val = _metric_agg(
        ds,
        "Air Temperature at 2m",
        np.arange(1, 13),
        "time",
        "max",
        new_name,
        91,
        None,
        None,
        (1, "day"),
        "gev",
    )

    assert (
        type(calc_val) == xr.core.dataarray.DataArray
    ), "The output type of `metric_agg` should be an xarray DataArray."
    assert calc_val.shape == (
        1,
        num_sims,
    ), "This is not an expected output shape of `metric_agg`."
    assert (
        "simulation" in calc_val.dims
    ), "Simulation should remain in the expected output of `metric_agg`."
    assert (
        "time" not in calc_val.dims
    ), "Time should not be in the dimensions after `metric_agg` is calculated."
    assert np.all(
        (calc_val >= 0) & (calc_val < 366)
    ), "All values should be between 0 and 366 (no above heat index days to only above heat index days)"
    assert (
        calc_val.name == new_name
    ), "New name of DataArray should be carried on from argument."

    # Percentile test
    calc_val = _metric_agg(
        ds,
        "Air Temperature at 2m",
        np.arange(1, 13),
        "time",
        "max",
        new_name,
        None,
        95,
        None,
        (1, "day"),
        "gev",
    )

    assert (
        type(calc_val) == xr.core.dataarray.DataArray
    ), "The output type of `metric_agg` should be an xarray DataArray."
    assert calc_val.shape == (
        1,
        num_sims,
    ), "This is not an expected output shape of `metric_agg`."
    assert (
        "simulation" in calc_val.dims
    ), "Simulation should remain in the expected output of `metric_agg`."
    assert (
        "time" not in calc_val.dims
    ), "Time should not be in the dimensions after `metric_agg` is calculated."
    assert (
        "lat" in calc_val.coords and "lon" in calc_val.coords
    ), "Lat and lon dimensions should exist after percentile `metric_calc`."
    assert np.all(
        calc_val < ds.max()
    ), "95th yearly percentiles should all be below the max of the entire DataArray."
    assert (
        calc_val.name == new_name
    ), "New name of DataArray should be carried on from argument."

    # One-in-X test
    calc_val = _metric_agg(
        ds,
        "Air Temperature at 2m",
        np.arange(1, 13),
        "time",
        "max",
        new_name,
        None,
        None,
        10,
        (1, "day"),
        "gev",
    )

    assert (
        type(calc_val) == xr.core.dataarray.DataArray
    ), "The output type of `metric_agg` should be an xarray DataArray."
    assert calc_val.shape == (
        num_sims,
    ), "This is not an expected output shape of `metric_agg`."
    assert (
        "simulation" in calc_val.dims
    ), "The expected output dimension of `metric_agg` 1-in-X has `simulation`."
    assert (
        calc_val.name == new_name
    ), "New name of DataArray should be carried on from argument."


def cava_data():
    return


##### NOT DONE #####

# @pytest.fixture
# def mock_input_locations():
#     """Fixture for creating a mock input locations DataFrame."""
#     return read_csv_file(stations_csv_path, index_col=0)[
#         ["station", "LAT_Y", "LON_X"]
#     ].rename(columns={"LAT_Y": "lat", "LON_X": "lon"})


# def test_clean_wl_data(test_dataset_WL_Alamedacounty_45km_hourly):
#     """Test on `_clean_wl_data` with separate_files=False"""
#     return


# Test cases

# downscaling method (2), approach (2), WL (4), ssp (3), historical (2), wrf_bias_adjust (2), variable (3), metric_calc (4), export_method (3), batch_mode (2)

# At least 10 ^^
